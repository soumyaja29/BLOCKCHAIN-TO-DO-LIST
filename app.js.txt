// app.js
let contract;
let account;

const init = async () => {
  if (window.ethereum) {
    const web3 = new Web3(window.ethereum);
    await ethereum.request({ method: 'eth_requestAccounts' });
    const accounts = await web3.eth.getAccounts();
    account = accounts[0];

    const abi = [ [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_content",
				"type": "string"
			}
		],
		"name": "createTask",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "completed",
				"type": "bool"
			}
		],
		"name": "TaskCompleted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "content",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "completed",
				"type": "bool"
			}
		],
		"name": "TaskCreated",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_id",
				"type": "uint256"
			}
		],
		"name": "toggleCompleted",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "taskCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "tasks",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "content",
				"type": "string"
			},
			{
				"internalType": "bool",
				"name": "completed",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
] ];
    const address = '0x1c91347f2A44538ce62453BEBd9Aa907C662b4bD';
    contract = new web3.eth.Contract(abi, address);

    loadTasks();
  } else {
    alert('Please install MetaMask!');
  }
};

const loadTasks = async () => {
  const taskCount = await contract.methods.taskCount().call();
  const taskList = document.getElementById('taskList');
  taskList.innerHTML = '';
  for (let i = 1; i <= taskCount; i++) {
    const task = await contract.methods.tasks(i).call();
    const li = document.createElement('li');
    li.innerHTML = `
      ${task.content} <button onclick="toggleCompleted(${task.id})">${task.completed ? 'Undo' : 'Complete'}</button>
    `;
    taskList.appendChild(li);
  }
};

const addTask = async () => {
  const taskInput = document.getElementById('taskInput');
  await contract.methods.createTask(taskInput.value).send({ from: account });
  taskInput.value = '';
  loadTasks();
};

const toggleCompleted = async (taskId) => {
  await contract.methods.toggleCompleted(taskId).send({ from: account });
  loadTasks();
};

document.getElementById('addTaskButton').addEventListener('click', addTask);

window.onload = init;
